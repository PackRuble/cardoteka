classDiagram

%%    namespace library {
%%        class a
%%        class b
%%    }

    class Card~V~ {
        <<Interface>>
        +DateType type*
        +~V~ defaultValue*
        +String key*
    }

    class DataType {
        <<Enumeration>>
        bool
        int
        double
        string
        stringList
    }

    class Watcher {
        <<Interface>>
        #notify(Card~V~ card, ~V~ value)* void
    }

    class WatcherImpl {
        <<Mixin>>
        #Watcher watcher
        -Map&lt;ICard, List&lt;CbWatcher>> _watchers

        #notify(Card~V~ card, ~V~ value) void
        +attach(Card~V~ card, CbWatcher~V~ watcher, detacher: Detacher?) ~V~
    }

    Watcher <|.. WatcherImpl

    class Converter ~V?,T~ {
        <<Interface>>
        from(T value)* V
        to(V object)* T
    }

    class ColorConverter~Color,String~ {
        fromDb(String value) Color
        toDb(Color color) String
    }

    Converter <|.. ColorConverter

    class Cardoteka {
        -Config _config
        +List~Card~ cards
        +Watcher watcher
        +bool isInitialized
        +init() Future~bool~
        +get(Card~V~ card) ~V~
        +getOrNull(Card~V?~ card) ~V?~
        +set(Card~V?~ card, ~V~ value) Future~bool~
        +setOrNull(Card~V?~ card, ~V?~ value) Future~bool?~
        +remove(Card card) Future~bool~
        +removeAll() Future~bool~
        +getCards() Set~Card~
        +getStoredEntries() Map&lt;Card, Object>
        +containsCard(Card card) Future~bool~
        +setMockInitialValues(Map&lt;Card, Object> values) void
    }

    class Config {
        +String name
        +Map&lt;Card, Converter>? converters
    }

    Cardoteka --* Config
    Cardoteka --* Watcher

    class AccessToSP {
        <<Mixin>>
        #+SharedPreferences prefs
        +setPrefix(String prefix) void
        +resetStatic() void
        +reInit() Future~void~
        +getEntries() Map&lt;String, Object>
    }

    class CRUD {
        <<Mixin>>
        +read(Card~V~ card) ~V~
        +create(Card~V~ card, [~V?~ value]) Future~bool~
        +update(Card~V~ card, ~V~ value) Future~bool~
        +delete(Card card) Future~bool~
    }